"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[415],{792:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var t=s(4848),n=s(8453);const r={},a="How do HCP jobs work?",i={id:"HighPerformanceComputing/HowJobWork",title:"How do HCP jobs work?",description:"HPC Cluster",source:"@site/docs/HighPerformanceComputing/HowJobWork.md",sourceDirName:"HighPerformanceComputing",slug:"/HighPerformanceComputing/HowJobWork",permalink:"/ResearchBlog/docs/HighPerformanceComputing/HowJobWork",draft:!1,unlisted:!1,editUrl:"https://github.com/nhan2892005/ResearchBlog/docs/HighPerformanceComputing/HowJobWork.md",tags:[],version:"current",frontMatter:{},sidebar:"HPC",previous:{title:"High Performance Computing",permalink:"/ResearchBlog/docs/HighPerformanceComputing/HPC"},next:{title:"Use cases for HPC",permalink:"/ResearchBlog/docs/HighPerformanceComputing/usecases"}},l={},c=[{value:"HPC Cluster",id:"hpc-cluster",level:2},{value:"Workflows of HPC Jobs",id:"workflows-of-hpc-jobs",level:2},{value:"1. <strong>Loosely Coupled Workloads</strong>",id:"1-loosely-coupled-workloads",level:3},{value:"Example:",id:"example",level:4},{value:"2. <strong>Tightly Coupled Workloads</strong>",id:"2-tightly-coupled-workloads",level:3},{value:"Example:",id:"example-1",level:4}];function d(e){const o={h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",p:"p",strong:"strong",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"how-do-hcp-jobs-work",children:"How do HCP jobs work?"})}),"\n",(0,t.jsx)(o.h2,{id:"hpc-cluster",children:"HPC Cluster"}),"\n",(0,t.jsx)(o.p,{children:"You can think of a high performance computing system as a group of computers called a cluster. And each computer in a cluster is called a node. Each unit in the cluster has an operating system, a processor with multiple cores, storage, and networking capabilities for the units to talk to each other."}),"\n",(0,t.jsx)(o.p,{children:"A smaller cluster, for example, can have 16 nodes with 64 cores, which is four cores per processor, helping you solve the problem much faster. A supercomputer is a much larger variation of this. An HPC job that would run across an on-premises cluster for three months could run across 125,000 cores in 16 hours in the cloud at little or no incremental cost."}),"\n",(0,t.jsx)(o.p,{children:(0,t.jsx)(o.img,{alt:"Node",src:s(9963).A+"",width:"893",height:"720"})}),"\n",(0,t.jsx)(o.h2,{id:"workflows-of-hpc-jobs",children:"Workflows of HPC Jobs"}),"\n",(0,t.jsx)(o.p,{children:"HPC workloads are generally categorized into two types: loosely coupled and tightly coupled. The distinction between these two types lies in how dependent tasks are on one another, the level of communication between nodes, and the computational demands."}),"\n",(0,t.jsxs)(o.h3,{id:"1-loosely-coupled-workloads",children:["1. ",(0,t.jsx)(o.strong,{children:"Loosely Coupled Workloads"})]}),"\n",(0,t.jsxs)(o.p,{children:["Loosely coupled workloads, often referred to as ",(0,t.jsx)(o.strong,{children:"parallel"})," or ",(0,t.jsx)(o.strong,{children:"high throughput jobs"}),", consist of independent tasks that can run simultaneously across the system without needing to communicate with each other. Although these tasks may share common storage or input data, they are not interdependent in terms of context or intermediate results. Each task completes in isolation, making this type of workload ideal for scenarios where tasks can be executed in parallel to speed up overall processing."]}),"\n",(0,t.jsx)(o.h4,{id:"example",children:"Example:"}),"\n",(0,t.jsxs)(o.p,{children:["One common example is ",(0,t.jsx)(o.strong,{children:"rendering Computer Generated Imagery (CGI)"})," for feature films. In this case, each frame of the movie is rendered independently of the others, though they share input data like backgrounds, textures, and 3D models. Since the frames do not depend on each other during rendering, they can be distributed across multiple nodes to be processed simultaneously, dramatically reducing overall rendering time."]}),"\n",(0,t.jsxs)(o.h3,{id:"2-tightly-coupled-workloads",children:["2. ",(0,t.jsx)(o.strong,{children:"Tightly Coupled Workloads"})]}),"\n",(0,t.jsxs)(o.p,{children:["Tightly coupled workloads involve many interdependent processes that work together to complete a single, cohesive task. These processes are typically distributed across different nodes in a cluster, and they must communicate frequently, often exchanging data or intermediate results in real-time. Tightly coupled workloads require low-latency networking and fast access to shared memory and storage to maintain synchronization across the cluster. ",(0,t.jsx)(o.strong,{children:"Message Passing Interface (MPI)"})," libraries, such as OpenMPI or Intel MPI, are commonly used to manage interprocess communication for these tasks."]}),"\n",(0,t.jsx)(o.h4,{id:"example-1",children:"Example:"}),"\n",(0,t.jsxs)(o.p,{children:["A classic example of tightly coupled workloads is ",(0,t.jsx)(o.strong,{children:"weather forecasting"}),". In this scenario, complex physics-based simulations model dynamic and interrelated systems such as temperature, wind, pressure, and precipitation. Different nodes in the HPC cluster might handle specific aspects of the weather system, computing partial solutions that must be combined to generate an accurate forecast. These processes need to constantly share data, requiring rapid communication between nodes to ensure the model\u2019s accuracy and timeliness."]}),"\n",(0,t.jsx)(o.p,{children:(0,t.jsx)(o.img,{alt:"HPC Cluster",src:s(9785).A+"",width:"710",height:"488"})}),"\n",(0,t.jsx)(o.hr,{})]})}function h(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},9963:(e,o,s)=>{s.d(o,{A:()=>t});const t=s.p+"assets/images/Node-090a03033f883cc448a82118cba50e7b.png"},9785:(e,o,s)=>{s.d(o,{A:()=>t});const t=s.p+"assets/images/cluster-51298b79086b62bee273d076184a7391.png"},8453:(e,o,s)=>{s.d(o,{R:()=>a,x:()=>i});var t=s(6540);const n={},r=t.createContext(n);function a(e){const o=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),t.createElement(r.Provider,{value:o},e.children)}}}]);